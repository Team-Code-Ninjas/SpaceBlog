@using SpaceBlog.Models;

@model SpaceBlog.Models.Article

@{
    ViewBag.Title = "Details";
}

<div class="container">
    <h1>@ViewBag.Title</h1>

    <!-- Page Header -->
    <header class="details-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    <div class="post-heading">
                        <h2>@Html.DisplayFor(model => model.Title)</h2>
                        <span class="meta">Posted by @Html.DisplayFor(model => model.Author.FullName)</span>
                        <span class="meta">On @Html.DisplayFor(model => model.Date)</span>
                    </div>
                    <hr />
                </div>
            </div>
        </div>
    </header>

    <!-- Post Content -->
    <article>
        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    <span class="meta-post-content">@Html.Raw(Model.Content)</span>
                </div>
            </div>
        </div>
        <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
            <br />
            @Html.ActionLink("Back", "Index", new { area = "" }, new { @class = "btn-sm btn-primary" })

            @if (User.IsInRole("Administrators") || User.IsInRole("Moderators") || User.Identity.Name == Model.Author.UserName)
            {
                @Html.ActionLink("Edit", "Edit", new { id = Model.Id }, new { @class = "btn-sm btn-primary" })
                @Html.ActionLink("Delete", "Delete", new { id = Model.Id }, new { @class = "btn-sm btn-danger" })
            }
        </div>
        <br />
        <br />
    </article>

    <aside class="commentar">
        <h3>Comments</h3>

        <div class="container">
            <div class="row">
                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                    @foreach (var comment in Model.Comments)
                    {
                        <div class="meta-posted">Posted by @comment.Author.FullName</div>
                        <div class="meta-posted postedDate">On @comment.Date</div>
                        <div class="meta-commentC">
                            <blockquote class="blockquote">@comment.Content</blockquote>
                        </div>
                        if (User.IsInRole("Administrators") ||
                            User.IsInRole("Moderators") ||
                            comment.Author.UserName == User.Identity.Name)
                        {
                            <div>
                                @Html.ActionLink("Edit", "Edit", null, new { @class = "btn btn-sm btn-primary" })
                                @Html.ActionLink("Delete", "Delete", "Comment", new { id = comment.Id }, new { @class = "btn btn-sm btn-danger" })
                            </div>
                        }
                        <br />
                    }
                </div>
            </div>
        </div>
    </aside>

    @if (ViewBag.IsUserLoggedIn)
    {
        @Html.Partial("_CommentBox", new CommentViewModel { ArticleId = Model.Id })
    }
    else
    {
        <p>You're not logged in please <a href="/Account/Login">log in</a></p>
    }
</div>

@{
    var comments = (IEnumerable<SpaceBlog.Models.Comment>)ViewBag.Comments;
    var ratingSum = ViewBag.RatingSum;
    var ratingCount = ViewBag.RatingCount;

    decimal rating = 0;

    if (ratingCount > 0)
    {
        rating = (ratingSum / ratingCount);
    }

    var totalRating = decimal.Parse(rating.ToString());
}

<hr />

<script>
    function SCRate()
    {
        for (var i = 1; i <= @totalRating; i++)
        {
            $("#sRate" + i).attr('class', 'starGlowN');
        }
    }

    $(function()
    {
        SCRate();
    });
</script>

<script type="text/javascript">
    function timeDifference(date) {
        date = new Date(date.slice(3));

        let current = new Date();

        let msPerMinute = 60 * 1000;
        let msPerHour = msPerMinute * 60;
        let msPerDay = msPerHour * 24;
        let msPerMonth = msPerDay * 30;
        let msPerYear = msPerDay * 365;

        var elapsed = current - date;

        if (elapsed < msPerMinute) {
            return Math.round(elapsed / 1000) + ' seconds ago';
        }
        else if (elapsed < msPerHour) {
            return Math.round(elapsed / msPerMinute) + ' minutes ago';
        }
        else if (elapsed < msPerDay ) {
            return Math.round(elapsed / msPerHour ) + ' hours ago';
        }
        else if (elapsed < msPerMonth) {
            return 'approximately ' + Math.round(elapsed / msPerDay) + ' days ago';
        }
        else if (elapsed < msPerYear) {
            return 'approximately ' + Math.round(elapsed / msPerMonth) + ' months ago';
        }
        else {
            return 'approximately ' + Math.round(elapsed / msPerYear ) + ' years ago';
        }
    }

    $(function(){
        $('.postedDate').each(function() {
            $(this).text(timeDifference($(this).text()))
        });
    });
</script>